[
  {
    "objectID": "Assignment GPID.html",
    "href": "Assignment GPID.html",
    "title": "Replication Assessment GPID",
    "section": "",
    "text": "This document intends to replicate the assignment developed by the GPID team at the World Bank described in R skills assessment. As presented below, I was able to recreate all outputs, tables and graphs. However, the results do not necessarily match the outputs expected by the GPID team. My believe is that, in some cases this is due to the aggregation method used (especially when the result differs only by a small scale), and in other cases it is due to a potential misinterpretation of the population weights. The document has the same structure as the assignment."
  },
  {
    "objectID": "Assignment GPID.html#introduction",
    "href": "Assignment GPID.html#introduction",
    "title": "Replication Assessment GPID",
    "section": "",
    "text": "This document intends to replicate the assignment developed by the GPID team at the World Bank described in R skills assessment. As presented below, I was able to recreate all outputs, tables and graphs. However, the results do not necessarily match the outputs expected by the GPID team. My believe is that, in some cases this is due to the aggregation method used (especially when the result differs only by a small scale), and in other cases it is due to a potential misinterpretation of the population weights. The document has the same structure as the assignment."
  },
  {
    "objectID": "Assignment GPID.html#basic-stats",
    "href": "Assignment GPID.html#basic-stats",
    "title": "Replication Assessment GPID",
    "section": "Basic Stats",
    "text": "Basic Stats\n\n1. Summary statistics of GDP per capita by region\n\n\nGiven code\ntag      &lt;- \"202311081903\"\nbase_url &lt;- \"https://github.com/randrescastaneda/pub_data/raw/\"\ndata_url &lt;- paste0(base_url, tag, \"/data/Rtest1/\")\n\n\nwdi &lt;-\n  readr::read_rds(paste0(data_url, \"wdi_in1.Rds\"))\n\n\nAfter downloading the data, I recreated the table with statistics of GDP per capita by region and year:\n\n\nMy code\n# Packages\nlibrary(DT)\nlibrary(dplyr)\nlibrary(Hmisc)\n\n# Check missing values\n# sapply(wdi, function(x) sum(is.na(x))) \n\n# Table grouped by region and date\ntable &lt;- wdi |&gt;\n  select(region,date,gdp, pop)|&gt;\n  filter(is.na(gdp)!=TRUE)|&gt;\n  rename(year=date)|&gt;\n  mutate(gdp_wgt= gdp*pop)\n\n# Stats table with N, mean, sd, min and max\nstats &lt;- table |&gt;\n  group_by(region, year)|&gt;\n  summarise(N=n(),Mean=weighted.mean(gdp,pop),SD=sqrt(Hmisc::wtd.var(gdp,pop)),Min=min(gdp),Max=max(gdp), .groups = \"drop\")\n\n# Present table                                                             \nstats_pre&lt;- rapply(stats, f = round, classes = \"numeric\", how = \"replace\", digits = 0)\ndatatable(stats_pre,options = list(pageLength = 10))\n\n\n\n\n\n\n\n\n\nClick to see replication test\n\nThere is a difference on the \\(10^{10}\\) decimal point. I used dplyr but I see the final output from the GPID team is in data.table format. It is possible that mean and standard deviations are calculated differently in each format.\n\n\nCode\n# Packages:\nlibrary(waldo)\n\n# Data to replicate\nstats_given= readr::read_rds(paste0(data_url, \"wdi_summ_out.Rds\"))\n\n# Comparison\nwaldo::compare(stats,stats_given)\n\n\n`class(old)`: \"tbl_df\"     \"tbl\" \"data.frame\"\n`class(new)`: \"data.table\"       \"data.frame\"\n\n`attr(old$region, 'label')` is a character vector ('region')\n`attr(new$region, 'label')` is absent\n\n`old$year` is a double vector (1990, 1991, 1992, 1993, 1994, ...)\n`new$year` is a character vector ('1990', '1991', '1992', '1993', '1994', ...)\n\n`old$N` is an integer vector (22, 22, 22, 22, 22, ...)\n`new$N` is a double vector (22, 22, 22, 22, 22, ...)\n\n     old$Mean           | new$Mean                           \n [1] 4913.1033824116084 - 4913.1033824116075 [1]             \n [2] 5105.0104171493358 | 5105.0104171493358 [2]             \n [3] 5290.8095613208006 | 5290.8095613208006 [3]             \n [4] 5482.7896793386972 - 5482.7896793386963 [4]             \n [5] 5740.0878796092356 - 5740.0878796092338 [5]             \n [6] 6037.2194463295655 | 6037.2194463295655 [6]             \n [7] 6339.7772987429998 - 6339.7772987430008 [7]             \n [8] 6537.7012496267325 - 6537.7012496267316 [8]             \n [9] 6449.2714744924242 | 6449.2714744924242 [9]             \n[10] 6634.8428345702760 - 6634.8428345702769 [10]            \n ... ...                  ...                and 116 more ...\n\n      old$Mean            | new$Mean                 \n[128] 39972.3937454740808 | 39972.3937454740808 [128]\n[129] 40540.1730477565070 | 40540.1730477565070 [129]\n[130] 41680.3363897968156 | 41680.3363897968156 [130]\n[131] 42299.3843855870582 - 42299.3843855870655 [131]\n[132] 43317.4916249835878 | 43317.4916249835878 [132]\n[133] 44705.8925252675472 | 44705.8925252675472 [133]\n[134] 46162.1959999669634 | 46162.1959999669634 [134]\n\n      old$Mean            | new$Mean                           \n[139] 50641.6393301463177 | 50641.6393301463177 [139]          \n[140] 52075.8345827743615 | 52075.8345827743615 [140]          \n[141] 53382.2451330527474 | 53382.2451330527474 [141]          \n[142] 54332.3212907509514 - 54332.3212907509442 [142]          \n[143] 54901.6846339972617 - 54901.6846339972544 [143]          \n[144] 54483.4046545501769 | 54483.4046545501769 [144]          \n[145] 52575.3572801488772 - 52575.3572801488699 [145]          \n[146] 53554.8870340037756 - 53554.8870340037683 [146]          \n[147] 54048.0111263539293 | 54048.0111263539293 [147]          \n[148] 54833.9476994414872 | 54833.9476994414872 [148]          \n  ... ...                   ...                 and 27 more ...\n\n      old$Mean           | new$Mean                          \n[176] 3933.3196505927381 | 3933.3196505927381 [176]          \n[177] 4163.1986496962954 | 4163.1986496962954 [177]          \n[178] 4314.9787515613989 | 4314.9787515613989 [178]          \n[179] 4486.6074089603626 - 4486.6074089603635 [179]          \n[180] 4696.0101367664583 | 4696.0101367664583 [180]          \n[181] 4961.1473706195020 | 4961.1473706195020 [181]          \n[182] 5264.6321169718831 | 5264.6321169718831 [182]          \n[183] 5604.4025093391583 | 5604.4025093391583 [183]          \n[184] 5901.5029808441441 - 5901.5029808441432 [184]          \n[185] 6206.6246759065261 - 6206.6246759065252 [185]          \n  ... ...                  ...                and 33 more ...\n\n     old$SD              | new$SD                             \n [6] 8796.34791297051925 | 8796.34791297051925 [6]            \n [7] 9011.02696463313441 | 9011.02696463313441 [7]            \n [8] 9045.03610218434005 | 9045.03610218434005 [8]            \n [9] 8823.33658869879400 - 8823.33658869879218 [9]            \n[10] 8835.69325873518210 | 8835.69325873518210 [10]           \n[11] 9054.57899734289276 | 9054.57899734289276 [11]           \n[12] 9025.56252977517215 - 9025.56252977517397 [12]           \n[13] 9035.93872514676332 | 9035.93872514676332 [13]           \n[14] 9087.50701808790654 | 9087.50701808790654 [14]           \n[15] 9234.06423354405888 - 9234.06423354406070 [15]           \n ... ...                   ...                 and 11 more ...\n\n     old$SD               | new$SD                              \n[29] 8826.34666014039067  | 8826.34666014039067  [29]           \n[30] 8728.53835896023338  | 8728.53835896023338  [30]           \n[31] 8430.03142783265503  | 8430.03142783265503  [31]           \n[32] 10745.70440258907183 - 10745.70440258907365 [32]           \n[33] 11314.00062411941872 - 11314.00062411941690 [33]           \n[34] 11902.36085392918903 - 11902.36085392919085 [34]           \n[35] 12058.03555832606253 | 12058.03555832606253 [35]           \n[36] 12962.30469087576967 | 12962.30469087576967 [36]           \n[37] 13357.40781462324412 | 13357.40781462324412 [37]           \n[38] 13593.77035867252926 | 13593.77035867252926 [38]           \n ... ...                    ...                  and 82 more ...\n\nAnd 1 more differences ...\n\n\n\n\n\n2. Aggregate stats\nHere I aggregated the life expectancy (lifeex), GDP (gdp) , and poverty headcount at international poverty line (pov_intl) as requested:\n\n\nMy code\nlibrary(tidyr)\nlibrary(reshape2)\nlibrary(DescTools)\n\ntable_agg &lt;- wdi |&gt;\n  select(region, date, lifeex, gdp, pov_intl, pop)|&gt;\n  gather(\"variable\", \"value\", -c(region,date,pop))|&gt;\n  group_by(region,date,variable)|&gt;\n  summarise(pop_tot= sum(pop),mean= sum(value*pop, na.rm = TRUE)/sum(pop),sd=sqrt(Hmisc::wtd.var(value,pop, na.rm = TRUE)), min = min(value, na.rm = TRUE), max = max(value, na.rm = TRUE), median= DescTools::Median(value, weights =pop, na.rm = TRUE))|&gt;\n  rename(pop=pop_tot)|&gt;\n  gather(\"estimate\", \"value\", -c(region,date,pop,variable))|&gt;\n  dcast(estimate+region+date+pop~variable)\n\ntable_agg_pre&lt;- rapply(table_agg, f = round, classes = \"numeric\", how = \"replace\", digits = 3)\ndatatable(table_agg_pre,options = list(pageLength = 10))\n\n\n\n\n\n\n\n\n\nClick to see replication test\n\nAgain, there is a difference on the \\(10^{10}\\) decimal point.\n\n\nCode\n# Data to replicate\naggre_given= readr::read_rds(paste0(data_url, \"wdi_agg_out.Rds\"))\n\n# Order table as wdi_agg_out\ntable_agg_ord = table_agg|&gt;\n  relocate(lifeex, .before = gdp)|&gt;\n  arrange(estimate,region, date)\n\naggre_given_ord =aggre_given|&gt;\n  arrange(estimate,region, date)\n\n# Comparison\nwaldo::compare(table_agg_ord,aggre_given_ord)\n\n\n`class(old)`: \"data.frame\"             \n`class(new)`: \"data.table\" \"data.frame\"\n\n`attr(old, 'sorted')` is absent\n`attr(new, 'sorted')` is a character vector ('iso3c', 'date')\n\n`attr(old$region, 'label')` is absent\n`attr(new$region, 'label')` is a character vector ('region')\n\n`attr(old$date, 'label')` is absent\n`attr(new$date, 'label')` is a character vector ('year')\n\n`attr(old$pop, 'label')` is absent\n`attr(new$pop, 'label')` is a character vector ('Population, total')\n\n`attr(old$lifeex, 'label')` is absent\n`attr(new$lifeex, 'label')` is a character vector ('Life expectancy at birth, total (years)')\n\n      old$lifeex          | new$lifeex                         \n[216] 76.5930000000000035 | 76.5930000000000035 [216]          \n[217] 75.7330000000000041 | 75.7330000000000041 [217]          \n[218] 76.0040000000000049 | 76.0040000000000049 [218]          \n[219] 68.1976973388072736 - 68.1976973388072594 [219]          \n[220] 68.4173163239407671 | 68.4173163239407671 [220]          \n[221] 68.8953557627815911 - 68.8953557627816053 [221]          \n[222] 69.3406373629141655 | 69.3406373629141655 [222]          \n[223] 69.6283283110117708 - 69.6283283110117850 [223]          \n[224] 70.0073311790400652 - 70.0073311790400794 [224]          \n[225] 70.2931615690908558 | 70.2931615690908558 [225]          \n  ... ...                   ...                 and 33 more ...\n\n      old$lifeex          | new$lifeex                         \n[266] 74.6915096858219698 | 74.6915096858219698 [266]          \n[267] 75.0494176630977137 | 75.0494176630977137 [267]          \n[268] 75.3108306962506475 | 75.3108306962506475 [268]          \n[269] 75.6999476866083398 - 75.6999476866083540 [269]          \n[270] 75.9848478169965631 | 75.9848478169965631 [270]          \n[271] 76.4571405400979103 - 76.4571405400979245 [271]          \n[272] 76.6417777359762482 | 76.6417777359762482 [272]          \n[273] 76.9847663139150455 - 76.9847663139150740 [273]          \n[274] 77.2951182257872063 - 77.2951182257871778 [274]          \n[275] 77.2301599055240189 | 77.2301599055240189 [275]          \n  ... ...                   ...                 and 70 more ...\n\n      old$lifeex          | new$lifeex                         \n[378] 59.8072268048575211 | 59.8072268048575211 [378]          \n[379] 60.2118258351601341 | 60.2118258351601341 [379]          \n[380] 60.5611054112612592 | 60.5611054112612592 [380]          \n[381] 60.9263817466173947 - 60.9263817466174089 [381]          \n[382] 61.4488284167672347 - 61.4488284167672489 [382]          \n[383] 62.0537947207797274 | 62.0537947207797274 [383]          \n[384] 62.6663194716481442 | 62.6663194716481442 [384]          \n[385] 62.9999490050389568 | 62.9999490050389568 [385]          \n[386] 63.4081710825230402 - 63.4081710825230473 [386]          \n[387] 63.8781656847296730 - 63.8781656847296659 [387]          \n  ... ...                   ...                 and 51 more ...\n\n      old$lifeex          | new$lifeex                          \n[870] 52.3049999999999997 | 52.3049999999999997 [870]           \n[871] 52.5540000000000020 | 52.5540000000000020 [871]           \n[872] 52.9099999999999966 | 52.9099999999999966 [872]           \n[873] 3.9943042072794732  - 3.9943042072794737  [873]           \n[874] 3.9612153183367820  - 3.9612153183367829  [874]           \n[875] 3.8478340581161898  - 3.8478340581161903  [875]           \n[876] 3.8030630509447874  | 3.8030630509447874  [876]           \n[877] 3.8085749048379296  - 3.8085749048379292  [877]           \n[878] 3.6976360408588960  - 3.6976360408588969  [878]           \n[879] 3.7601225105316893  - 3.7601225105316898  [879]           \n  ... ...                   ...                 and 211 more ...\n\nAnd 16 more differences ...\n\n\n\n\n\n3. Find outliers\nThe outliers of lifeex, gpd, and gini by year are the following:\n\n\nMy code\ntable_out&lt;- wdi |&gt;\n  group_by(date)|&gt;\n  mutate(across(c(lifeex, gdp, gini), list(mean=~weighted.mean(.,pop,na.rm=TRUE), sd=~sqrt(Hmisc::wtd.var(.,pop,na.rm=TRUE)))))|&gt; \n  ungroup()|&gt;\n  mutate(hl_lifeex=(lifeex&gt;(lifeex_mean+(2.5*lifeex_sd))), ll_lifeex=(lifeex&lt;(lifeex_mean-(2.5*lifeex_sd))), hl_gdp=(gdp&gt;(gdp_mean+(2.5*gdp_sd))), ll_gdp=(gdp&lt;(gdp_mean-(2.5*gdp_sd))), hl_gini=(gini&gt;(gini_mean+(2.5*gini_sd))), ll_gini=(gini&lt;(gini_mean-(2.5*gini_sd))))\n\ntable_out_pre&lt;- rapply(table_out, f = round, classes = \"numeric\", how = \"replace\", digits = 3)\ndatatable(table_out_pre,options = list(pageLength = 10))\n\n\n\n\n\n\n\n\n\nClick to see replication test\n\n\n\nCode\n# Given data\nout_given=readr::read_rds(paste0(data_url, \"wdi_outliers_out.Rds\"))\n\n# Order columns\n\n#colnames(table_out)\ncol_order &lt;- c(\"region\",\"iso3c\",\"date\",\"country\",\"pov_ofcl\", \"gdp\", \"gini\",\"lifeex\",\"pop\", \"pov_intl\", \"pov_lmic\", \"pov_umic\",\"lifeex_mean\", \"lifeex_sd\", \"hl_lifeex\",\"ll_lifeex\",\"gdp_mean\", \"gdp_sd\",\"hl_gdp\",  \"ll_gdp\", \"gini_mean\", \"gini_sd\",\"hl_gini\", \"ll_gini\")\n\ntable_out_ord &lt;- table_out[,col_order]\n\n# Comparison\nwaldo::compare(table_out_ord,out_given)\n\n\n`class(old)`: \"tbl_df\"     \"tbl\" \"data.frame\"\n`class(new)`: \"data.table\"       \"data.frame\"\n\n     names(old)    | names(new)                  \n[10] \"pov_intl\"    | \"pov_intl\"    [10]          \n[11] \"pov_lmic\"    | \"pov_lmic\"    [11]          \n[12] \"pov_umic\"    | \"pov_umic\"    [12]          \n[13] \"lifeex_mean\" - \"mean_lifeex\" [13]          \n[14] \"lifeex_sd\"   - \"sd_lifeex\"   [14]          \n[15] \"hl_lifeex\"   | \"hl_lifeex\"   [15]          \n[16] \"ll_lifeex\"   | \"ll_lifeex\"   [16]          \n[17] \"gdp_mean\"    - \"mean_gdp\"    [17]          \n[18] \"gdp_sd\"      - \"sd_gdp\"      [18]          \n[19] \"hl_gdp\"      | \"hl_gdp\"      [19]          \n ... ...             ...           and 5 more ...\n\n`attr(old, 'sorted')` is absent\n`attr(new, 'sorted')` is a character vector ('iso3c', 'date')\n\n`old$lifeex_mean` is a double vector (65.1387081809776, 65.3039173530013, 65.5710908143634, 65.7207119327005, 65.954878380793, ...)\n`new$lifeex_mean` is absent\n\n`old$lifeex_sd` is a double vector (7.9419121100017, 7.93722985329994, 7.95373240341107, 7.98590067705724, 8.07516513654721, ...)\n`new$lifeex_sd` is absent\n\n`old$gdp_mean` is a double vector (9566.9769782402, 9510.64978016636, 9492.38913200708, 9489.38029694498, 9599.830824424, ...)\n`new$gdp_mean` is absent\n\n`old$gdp_sd` is a double vector (12598.5167151778, 12531.805988629, 12537.9938122029, 12479.7701791348, 12690.6547009464, ...)\n`new$gdp_sd` is absent\n\n`old$gini_mean` is a double vector (35.8092696275814, 34.8497784891616, 41.8397610388279, 35.4086793883555, 40.9813601512541, ...)\n`new$gini_mean` is absent\n\n`old$gini_sd` is a double vector (7.62150494730106, 6.33118158811167, 8.899886236967, 7.1613135496093, 6.86710317462654, ...)\n`new$gini_sd` is absent\n\n`old$mean_lifeex` is absent\n`new$mean_lifeex` is a double vector (65.1387081809775, 65.3039173530013, 65.5710908143635, 65.7207119327005, 65.954878380793, ...)\n\nAnd 5 more differences ...\n\n\n\nThe chart of lifeex of each country in each year, with the weighted mean of lifeex per year and the 2.5 confidence interval:\n\n\nCode\nlibrary(ggplot2)\n\nggplot(table_out, aes(x=date,y=lifeex))+\n  geom_point(aes(col = region))+\n  geom_line(aes(y=lifeex_mean))+\n  geom_ribbon(aes(ymin=(lifeex_mean-(2.5*lifeex_sd)),ymax=(lifeex_mean+(2.5*lifeex_sd))),alpha=0.3)+\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Assignment GPID.html#simulated-data",
    "href": "Assignment GPID.html#simulated-data",
    "title": "Replication Assessment GPID",
    "section": "Simulated Data",
    "text": "Simulated Data\nFor the following tasks, there was no link to the data in the assignment. However, I used the data in the repository called svy_sim_in1.Rds, because I assumed it was what the GPID team meant by simulated surveys.\nThe text in the assignment mentions that “All the measures should be population-weighted.” and for the following tasks I assumed that the population-weight is the variable in the data.table called weight.\nMost of my results in this section, however, do not match perfectly to those presented by the GPID team. I believe this is due to a misinterpretation of the weight variable on my part. This is why I do not run the waldo::compare() command for the following task as I did for the previous section.\n\n4. Poverty measures\n\n\nGiven code\n# Remove previous data \nrm(wdi)\nrm(list=ls(pattern=\"^table\"))\nrm(list=ls(pattern=\"^stats\"))\nrm(list=ls(pattern=\"^aggre\"))\n\n# Download new data (it is too heavy so I create a new file)\n#svy_sim &lt;- readr::read_rds(paste0(data_url, \"svy_sim_in1.Rds\"))\n\n# Use data\nsvy_sim &lt;- readRDS(file=\"svy_sim.Rds\")\n\n\nThe following are the estimates for poverty headcount, poverty gap and poverty severity for each year using the global poverty lines of $2.15, $3.65, and $6.85 in 2017 PPP prices:\n\n\nMy code\n# Packages\nlibrary(purrr)\n\n# Function FGT\nFGT_fun &lt;- function(x,p,d){\n  ins = ((p - x[x &lt; p]) / p)^d\n  n = length(x)\n  FGT = sum(ins)/n\n  FGT\n}\n\nFGT_fun_w &lt;- function(x,w,p,d){\n  ins = ((p - x[x &lt; p])/ p)^d \n  FGT = sum(ins*w[x &lt; p])/sum(w)\n  FGT\n}\n\n\n# Add variable of poverty lines\npov_lines &lt;- c(2.15, 3.65, 6.85)\npov_measure= c('headcount', 'povgap','povseverity')\n\nlist_pov_m&lt;-list()\nfor(j in 1:3){\n  fgt = pov_measure[j]\n  list_pov_m[[fgt]]&lt;-list()\n  for (i in 1:length(pov_lines)) {\n  pov &lt;- as.character(pov_lines[i])\n  list_pov_m[[fgt]][[pov]] &lt;- map(svy_sim,~FGT_fun(.x$income*.x$weight,i,j-1))\n}\n}\n\nlist_pov_w&lt;-list()\nfor(j in 1:3){\n  fgt = pov_measure[j]\n  list_pov_w[[fgt]]&lt;-list()\n  for (i in 1:length(pov_lines)) {\n  pov &lt;- as.character(pov_lines[i])\n  list_pov_w[[fgt]][[pov]] &lt;- map(svy_sim,~FGT_fun_w(.x$income,.x$weight,i,j-1))\n}\n}\n\n\n# Create data frame and merge\nheadcount = list_pov_w$headcount |&gt; \n  bind_rows(.id = \"pov_line\") |&gt;\n  pivot_longer(!pov_line, names_to = \"Year\", values_to = \"headcount\")\n\npovgap = list_pov_w$povgap |&gt; \n  bind_rows(.id = \"pov_line\") |&gt;\n  pivot_longer(!pov_line, names_to = \"Year\", values_to = \"povgap\")\n\npovseverity= list_pov_w$povseverity |&gt; \n  bind_rows(.id = \"pov_line\") |&gt;\n  pivot_longer(!pov_line, names_to = \"Year\", values_to = \"povseverity\")\n\nall_measures= merge(headcount,merge(povgap,povseverity,by=c('Year','pov_line')),by=c('Year','pov_line'))\n\nall_measures$Year=as.numeric(substr(all_measures$Year, 2, 5))\n\ndatatable(all_measures,options = list(pageLength = 10))\n\n\n\n\n\n\n\nUnfortunately, the table found does not match the table given. Also, in the following graph, we can see that headcount does not match especially for 2010. I believe this is the result of a misinterpretation or misuse of the weightvariable in the calculations.\n\n\nCode\nggplot(all_measures)+\n  geom_line(aes(x=Year,y=headcount, color=pov_line))+\n  geom_point(aes(x=Year,y=headcount, color=pov_line))\n\n\n\n\n\n\n\n5. Lorenz curve\nThe following code presents the R function I used to create the variables on the Lorenz curve table. Here, as well, there seems to be a mishandling of the weights on my part, because the data does not match the one given by the GPID team.\n\n# Make it data frame\nall_svy &lt;- svy_sim |&gt; \n  bind_rows(.id = \"Year\") |&gt;\n  mutate(Year=as.numeric(substr(Year, 2, 5)))\n\n# Create table\nbins= c(1:100)\ntable_val &lt;- 0\n\nfor (i in bins){\n  decile &lt;- all_svy |&gt;\n  group_by(Year)|&gt;\n  summarise(bin=i, \n            welfare=quantile(income,i/100),\n            cum_welfare=sum(income[income&lt;=welfare]*weight[income&lt;=welfare])/sum(income*weight),\n            cum_population=sum(weight[income&lt;=welfare])/sum(weight))\n  \n  table_val &lt;- rbind(table_val,decile)\n}\n\ntable_val= table_val[-1,]\ndatatable(table_val,options = list(pageLength = 10))\n\n\n\n\n\n\nHowever, we can see that the graph shows a good approximation of the Lorenz curve for this population.\n\n\nCode\n#Graph \n\nggplot(table_val)+\n  geom_line(aes(x=cum_population,y=cum_welfare,color=as.factor(Year)))\n\n\n\n\n\n\n\n6. Gini coefficient\nFinally, in the following code I created a function to calculate the Gini coefficient. I used a package to calculate the area under the curve, which I hope was allowed.\n\n\nCode\nlibrary(smplot2)\ngini_tab &lt;- table_val |&gt;\n  group_by(Year) |&gt;\n  summarise(area=smplot2::sm_auc(cum_population, cum_welfare),gini= 1-2*area)\n\ndatatable(gini_tab[,c(\"Year\",\"gini\")],options = list(pageLength = 10))\n\n\n\n\n\n\n\nThe graph matches closely to the results presented by the GPID team:\n\n\nCode\nggplot(gini_tab)+\n  geom_point(aes(x=Year,y=gini))+\n  geom_line(aes(x=Year,y=gini))"
  }
]